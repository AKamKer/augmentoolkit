- role: user
  content: |
    You are creating varied pretraining data for a large language model, using an input text (and a set of facts extracted from it) as a reference. Your goal is to take the information and transform its format, style, fact order, and number of facts used, to make a variation on what was originally written (the variation will not contradict any of the information in the original, and it will not use any facts not present in the original, but it will change the order/structure etc.). The reason why we're doing all of this is to make the LLM  more robust to variations in the data it's trained on; to make it more generalizable; and to create more "representations" of the same information in the model's brain.

    You'll also want to "reverse" the expression of some of the facts (both atomic and inferred. Not all, but some, of your choosing). Changing the fact order means if the original passage said "fact 1, fact 2, fact 3", the variation might say "fact 2, fact 3, fact 1". Reversal however, means that if fact 1 was "A = B", the variation might say "B = A". You should reverse and change the fact order as you see fit, in a natural way, to create a compelling variation that does not in any way contradict the original.

    Examples of reversal:
    - "The Eiffel Tower is in Paris" -> "One tower which is in Paris is the Eiffel Tower"
    - "2 + 2 is 4" -> "two numbers that sum to 4 are 2 and 2"
    - "Democratic countries include the United States, France, and Germany" -> "The United States, France, and Germany are democratic countries"
    - "All men are mortal" -> "Mortality is a property of all men"
    - "Code has to work to be useful" -> "Usefulness is a must for code"
    - "Jeanne Calment was the longest-lived person in the world" -> "the longest lived person in the world was Jeanne Calment"
    Keep in mind how facts reverse when you're writing out your rewrite. You will want to reverse some facts, without changing the actual meaning of the fact.

    Additional rules:
    - Try to be relatively information-dense
    - Do not add in any new information that wasn't present in the original text
    - Do not add comments or implicications that go against the original information or profess a canonical interpretation of the information's meaning

    Your rewrite must also be into a specific format: Reverse Causality. Basically: start from the conclusions or "endpoint" of the information you see and work backwards to the causes/"start"/"beginning" of the information, adding variation and reversal as you see fit without compromising the original information. If the provided info starts high-level and goes down, start low-level and work up; if it starts low-level and goes up, start high-level and work down. Surround your final output with <rewrite> and </rewrite> tags so that your answer may be parsed by a program.

    Note that since Reverse Causality is not necessarily a standard way of writing things, here is an example (based on some writing about Ethereum) of it in practice (outputs only):

    ```example
    <rewrite>
    CURRENT APPLICATIONS & CAPABILITIES
    • Implementation simplicity characterizes token systems in Ethereum
    • A single database operation enables token transfers:
      - Balance reduction from sender
      - Balance addition to recipient
      - Subject to sender approval and sufficient balance
    • Application categories serve distinct purposes:
      - Financial: Derivatives, wills, contracts
      - Semi-financial: Computational bounties
      - Non-financial: Governance, voting
    ↑ ENABLED BY

    IMPLEMENTATION ARCHITECTURE
    • Nodes perform contract code execution during block validation
    • Tree structure enables efficient state storage:
      - Patricia tree facilitates node operations
      - Adjacent blocks share majority of tree data
      - Pointer system uses subtree hashes
    • Last-block state storage eliminates historical chain requirements
      - Potential 5-20x space efficiency
    ↑ ENABLED BY

    VALIDATION & PROCESSING MECHANISMS
    • Final state verification uses Merkle tree root comparison
    • Sequential transaction processing with APPLY function:
      - Starts from previous block state (S[0])
      - Processes each transaction
      - Includes miner reward in final state
    • Multiple validation checks ensure integrity:
      - Proof-of-work verification
      - Timestamp boundaries
      - Gas limit compliance
    ↑ ENABLED BY

    FUNDAMENTAL ARCHITECTURE
    • State is maintained within Ethereum blocks
    • Block structure contains:
      - Transaction list
      - Current state
      - Block number
      - Difficulty value
    • Core design shares Bitcoin blockchain principles
    </rewrite>
    ```

    Except I did that example, you can probably do better and I encourage you to do so. Especially to focus more on the "logic" side of things.

    Note that you can change up the order of the atomic facts used for the next one perhaps, and also perhaps not use all of them. Maybe start with a fact halfway down next time and have the fact that's first in the original document go last; maybe not use one or two tidbits. This will create a variety of length and detail.

    You are encouraged to think a bit, before you start your <rewrite>, about which facts you'll reverse, and what order you'll use, as well as how to produce a rewrite that IS CAREFUL ABOUT NOT CONTRADICTING THE ORIGINAL INFORMATION (or implying any contradictions). Just a heads-up, too: do not actually write the fact numbers or any other meta-information in the actual rewrite! So no "All men are mortal (Fact 3)" etc. You'd just write "All men are mortal."

    Original text:
    {additional_dataset_context}

    {text}

    Atomic facts (may be missing some information, use only as a guide for your reversal of certain facts for maximal variety):
    {atomic_facts}

    Inferred facts (these are inferences that have been identified using the text you see above. Use these as a guide for your reversal of certain facts for maximal variety):
    {inferred_facts}
    ----------
    Reminder: when writing your rewrite, do not put fact numbers next to the actual facts. This is meant to be clean, natural text, with no indication that we ever had a list of facts in the first place. We're mimicking pretraining data here. Keep those fact numbers in the thinking where they belong, thanks.